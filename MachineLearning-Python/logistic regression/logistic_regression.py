# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ngDPiOEJ24-1NoqVnLA6Xx4js0pctK19
"""

import math
import numpy as np
import pandas as pd
from pandas import DataFrame
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
#from sklearn.cross_validation import train_test_split
from sklearn.model_selection import train_test_split
from numpy import loadtxt, where
from pylab import scatter, show, legend, xlabel, ylabel



# scale larger positive and values to between -1,1 depending on the largest
# value in the data
min_max_scaler = preprocessing.MinMaxScaler(feature_range=(-1,1))
df = pd.read_csv("data.csv", header=0)

df

# clean up data
df.columns = ["grade1","grade2","label"]

df

# formats the input data into two arrays, one of independant variables
# and one of the dependant variable
X = df[["grade1","grade2"]]
X = np.array(X)

X

X = min_max_scaler.fit_transform(X)
Y = df["label"].map(lambda x: float(x.rstrip(';')))
Y = np.array(Y)

Y

# visualize data, uncomment "show()" to run it
pos = where(Y == 1)
neg = where(Y == 0)
scatter(X[pos, 0], X[pos, 1], marker='o', c='b') # passed
scatter(X[neg, 0], X[neg, 1], marker='x', c='r') # failed
xlabel('Exam 1 score')
ylabel('Exam 2 score')
legend(['Not Admitted', 'Admitted'])
show()

scatter(X[:,0], X[:, 1]) # passed

# visualize data, uncomment "show()" to run it
pos = where(Y == 1)
neg = where(Y == 0)
scatter(X[pos,0], Y[pos], marker='o', c='g')
scatter(X[neg, 0], Y[neg], marker='x', c='r')
xlabel('Exam 1 score')
ylabel('Status of admission')
legend(['Admitted', 'Not Admitted'])
show()

# visualize data, uncomment "show()" to run it
pos = where(Y == 1)
neg = where(Y == 0)
scatter(X[pos,1], Y[pos], marker='o', c='g')
scatter(X[neg, 1], Y[neg], marker='x', c='r')
xlabel('Exam 2 score')
ylabel('Status of admission')
legend(['Admitted', 'Not Admitted'])
show()

# creating testing and training set
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.33)

# train scikit learn model 
clf = LogisticRegression()
clf.fit(X_train,Y_train)
print ('score Scikit learn: ', clf.score(X_test,Y_test))

lr_prediction = clf.predict(X_test)
lr_prediction

Y_test

est=clf.predict_log_proba(X)

