# -*- coding: utf-8 -*-
"""Artificial Neural Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13rLYMlsju6_yqNNPoB5PVmTBAaUuTFab

# **1. Data Preprocessing**
1.1 Import the Libraries-
"""

import numpy as np
np.set_printoptions(threshold=np.inf)
import pandas as pd

"""1.2 Load the Dataset"""

dataset = pd.read_csv('Churn_Modelling.csv')
dataset

"""1.3 Split Dataset into X and Y

"""

X = pd.DataFrame(dataset.iloc[:, 3:13].values)
y = dataset.iloc[:, 13].values

"""Independent Variables (X)-"""

X

"""Dependent Variable(y)–"""

y

"""1.4 Encode Categorical Data–

"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_2 = LabelEncoder()
X.loc[:, 2] = labelencoder_X_2.fit_transform(X.iloc[:, 2])

X

"""One Hot Encoding-


"""

from sklearn.compose import ColumnTransformer

columnTransformer_X_1 = ColumnTransformer([('0', OneHotEncoder(), [1])],remainder='passthrough')
X = columnTransformer_X_1.fit_transform(X)

y

X

"""1.5 Split the X and Y Dataset into the Training set and Test set

"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

X_train.shape

"""1.6 Perform Feature Scaling

"""

X_test.shape

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_test

"""# 2. Build Artificial Neural Network
2.1 Import the Keras libraries and packages

"""

import keras
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras import layers

"""2.2 Initialize the Artificial Neural Network

"""

model = Sequential()

"""2.3 Add the input layer and the first hidden layer

"""

model.add(layers.Dense(6, activation = 'relu'))

"""2.4 Add the second hidden layer"""

model.add(layers.Dense(6, activation = 'relu'))

"""2.5 Add the output layer

"""

model.add(layers.Dense(1, activation = 'sigmoid'))

"""# 3. Train the ANN
3.1 Compile the ANN

"""

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""3.2 Fit the ANN to the Training set

"""

model.fit(X_train, y_train, batch_size = 10, epochs = 10)

"""# 4. Predict the Test Set Results-

"""

y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)

"""# 5. Make the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test,y_pred)